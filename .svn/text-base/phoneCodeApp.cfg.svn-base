var ghost = require(process.argv[2]+'/webrexco/cfg/ghost.js'); 
var gapi = require(process.argv[2]+'/webrexco/cmn/gapi.js');

exports.itfconf = function() {
    return new CurrentAPI().conf();
}

exports.itfleft = function(req,res,fld,fle) {
    return new CurrentAPI().output(req,res,fld,fle);
}

var CurrentAPI = gapi.BaseAPI.extend({
    conf: function() { return { auth: false,
            type: "json",
            itfs: [
                {
                    host: ghost.dscm.makercenter.addr,
                    port: ghost.dscm.makercenter.port,
                    iurl: "/phoneCodeApp?actn=phoneSms",
                    uuid: "phoneCodeApp",
                    meth: "post",
                    type: "sdcm",
                    next: [],
                    func: function(req,res,fld,fle){
                        return new CurrentAPI("phoneCodeApp").
                            callFunc(req,res,fld,fle);
                    }
                }
            ]
        };
    },

	doCallFunc: function(uuid, req, res, fld, fle) {
		var ip = gapi.getIPv4(req.user.addr);
		var phone = gapi.getParameter(req, "phone")?gapi.getParameter(req, "phone"):req.session.user&&req.session.user.phone;
		var type = gapi.getParameter(req, "type");
		var userId = req.session.user&&req.session.user.userId?req.session.user.userId:null;
		if(gapi.emptyEqual(phone,"")) {
			res.jsonp(gapi.toResult(1, "手机号不能为空"));
			ghost.getLogger().info("[doCallFunc]IP：%s, service: login.sendPhoneCode, dc:phoneCodeApp.phoneSms, message: 'param error', param: phone=%s", ip, phone);
			return null;
		}
		if(req.session.vCode&&phone!=req.session.vCode.phone) {
		 	req.session.vCode = null;
		}
		if(req.session.vCode&&req.session.vCode.expire&&Date.now()<req.session.vCode.expire) {
			res.jsonp(gapi.toResult(1, "发送验证码太频繁，请稍后再试"));
			ghost.getLogger().info("[doCallFunc]IP：%s, service: login.sendPhoneCode, dc:phoneCodeApp.phoneSms, message: 'too many phoneSms call'", ip);
			return null;
		}
		req.session.vCode={
			"vCode":null,
			"expire":null,
			"phone":phone
		};
		
		ghost.getLogger().info("[doCallFunc]IP：%s, service: login.sendPhoneCode, dc:phoneCodeApp.phoneSms, message: 'param', param: userId=%s, phone=%s, type=%s", ip, userId, phone, type);
		return {
			"claz" : "['java.lang.Long','java.lang.String','java.lang.Integer']",
			"json" : [userId, phone, type]
		};
	},

	doOutput: function(req, res, fld, fle) {
		var ip = gapi.getIPv4(req.user.addr);
		if(!req.rslt['phoneCodeApp']){
			ghost.getLogger().error("[doOutput]IP：%s, service: login.sendPhoneCode, dc:phoneCodeApp.phoneSms, message: 'rslt is null', rslt: %s", ip, JSON.stringify(req.rslt['phoneCodeApp']));
			return gapi.toResult(500, "系统异常");
		}
		if(gapi.emptyNoequal(req.rslt['phoneCodeApp'].code, 0)) {
			//这里根据后端服务返回的code值不同提示信息不同
			if(gapi.emptyEqual(req.rslt['phoneCodeApp'].message, "")) {
				req.rslt['phoneCodeApp'].message = "失败";
			}
			ghost.getLogger().error("[doOutput]IP：%s, service: login.sendPhoneCode, dc:phoneCodeApp.phoneSms, message: 'rslt error', rslt: %s", ip, JSON.stringify(req.rslt['phoneCodeApp']));
			return gapi.toResult(202, req.rslt['phoneCodeApp'].message);
		}
		//TODO 保存验证码到session中 
		req.session.vCode = {
			"expire":Date.now()+60*1000,//对比时间
		 	"vCode":req.rslt['phoneCodeApp'].valicode,//验证码
		 	"phone": gapi.getParameter(req,"phone")?gapi.getParameter(req,"phone"):req.session.vCode.phone
		};
		ghost.getLogger().info("[doOutput]IP：%s, service: login.sendPhoneCode, dc: phoneCodeApp.phoneSms, message: 'vCode for test', rslt: %s", ip, JSON.stringify(req.rslt['phoneCodeApp']));
		return gapi.toResult(200, "发送成功");
	}
});
