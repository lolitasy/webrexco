var ghost = require(process.argv[2]+'/webrexco/cfg/ghost.js'); 
var gapi = require(process.argv[2]+'/webrexco/cmn/gapi.js');

exports.itfconf = function() {
    return new CurrentAPI().conf();
}

exports.itfleft = function(req,res,fld,fle) {
    return new CurrentAPI().output(req,res,fld,fle);
}

var CurrentAPI = gapi.BaseAPI.extend({
    conf: function() { return { auth: false,
            type: "json",
            itfs: [
                {
                    host: ghost.dscm.makercenter.addr,
                    port: ghost.dscm.makercenter.port,
                    iurl: "/pcLoginRegister?actn=register",
                    uuid: "pcLoginRegister",
                    meth: "post",
                    type: "sdcm",
                    next: [],
                    func: function(req,res,fld,fle){
                        return new CurrentAPI("pcLoginRegister").
                            callFunc(req,res,fld,fle);
                    }
                }
            ]
        };
    },
    
	doCallFunc: function(uuid, req, res, fld, fle) {
		var phone = gapi.getParameter(req, "username");
		var	password = gapi.getParameter(req, "password");
		var	verifycode = gapi.getParameter(req, "valiCode");//图形验证
		var	code = gapi.getParameter(req, "phoneCode");//手机验证
		var	inviteUserId =null;
		var	openid = gapi.getParameter(req, "openid")?gapi.getParameter(req, "openid"):null;
		var	name = gapi.getParameter(req, "name")?gapi.getParameter(req, "name"):null;
		var	type = gapi.getParameter(req, "type")?gapi.getParameter(req, "type"):null;
		var ip = gapi.getIPv4(req.user.addr);
		if(gapi.emptyEqual(phone ,"")) {
			res.jsonp(gapi.toResult(201, "手机号码不能为空"));
			ghost.getLogger().info("[doCallFunc]IP：%s, service: login.register, dc: pcLoginRegister.register, message: 'param error', param: phone=%s", ip, phone);
			return null;
		}
		if(gapi.emptyEqual(password,"")) {
			res.jsonp(gapi.toResult(201, "密码不能为空"));
			ghost.getLogger().info("[doCallFunc]IP：%s, service: login.register, dc: pcLoginRegister.register, message: 'param error', param: password", ip);
			return null;
		}
		if(!(req.user.code&&verifycode.toLowerCase() == req.user.code.toLowerCase())) {
			res.jsonp({"code":202,"message":"图形验证码错误"});
			ghost.getLogger().info("[doCallFunc]IP：%s, service: login.register, dc: pcLoginRegister.register, message: 'param error', param: verifycode=%s", ip, verifycode);
			return null;
		}
		if(!req.session.vCode||gapi.emptyNoequal(code, req.session.vCode.vCode)||gapi.emptyNoequal(phone, req.session.vCode.phone)) {
		 	res.jsonp({"code":202,"message":"手机验证码错误"});
		 	ghost.getLogger().info("[doCallFunc]IP：%s, service: login.register, dc: pcLoginRegister, message: 'param error', param: code=%s", ip, code);
		 	return null;
		}	
		req.user.code = null;
		req.session.vCode=null;
		ghost.getLogger().info("[doCallFunc]IP：%s, service: login.register, dc: pcLoginRegister.register, message: 'param', param: inviteUserId=%s,phone=%s,password,openid=%s,type=%s,name=%s", ip, inviteUserId,phone,password,openid,type,name);
		return {
	     	"claz" : "['java.lang.Long','java.lang.String','java.lang.String','java.lang.String','java.lang.Integer','java.lang.String']",
	        "json" : [inviteUserId,phone,password,openid,type,name]
	    };
	},
	doOutput: function(req, res, fld, fle) {
		var ip = gapi.getIPv4(req.user.addr);
		if(!req.rslt['pcLoginRegister']){
			ghost.getLogger().error("[doOutput]IP：%s, service: register, dc: pcLoginRegister.register, message: 'rslt is null', rslt: %s", ip, JSON.stringify(req.rslt['pcLoginRegister']));
			return gapi.toResult(500, "系统异常");
		}
  		//注册成功记录登陆状态
		var userDTO = req.rslt['pcLoginRegister'].data.user;
		var userName = userDTO.username,
			userId = userDTO.userId,
			phoneStatus = userDTO.phoneStatus,
        	realStatus = userDTO.realStatus,
        	inviteUserid = userDTO.inviteUserid,
        	phone = userDTO.phone;
		req.session.user = {
			"addr":gapi.getIPv4(req.user.addr),
			"userId":userId,
			"userName":userName,
			"phoneStatus":phoneStatus,
			"realStatus":realStatus,
			"inviteUserid":inviteUserid,
			"phone":phone
		};
		//生成注册成功时间戳；
		var registTime = new Date().getTime();
		if(req.session.channel){//根据session里有没有channel，判断是否来自第三方
			var output = {
				fromChannel:1,
				registTime:Math.floor(registTime/1000)
			};
		}
		ghost.getLogger().info("[doOutput]IP：%s, service: register, dc: pcLoginRegister.register, message: 'register success', rslt: userId=%s,userName=%s", ip, userId, userName);
		return gapi.toResult(null, "注册成功",output);
	}
});
