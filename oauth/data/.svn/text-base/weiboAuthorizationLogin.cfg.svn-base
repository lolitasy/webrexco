"use strict";

const ghost = require(process.argv[2] + '/webrexco/cfg/ghost.js');
const gapi = require(process.argv[2] + '/webrexco/cmn/gapi.js');

exports.itfconf = function () {
	return new CurrentAPI().conf();
}

exports.itfleft = function (req, res, fld, fle) {
	return new CurrentAPI().output(req, res, fld, fle);
}
var CurrentAPI = gapi.BaseAPI.extend({
	conf: function () {
		return {
			auth: false,
			type: "json",
			itfs: [
				{
					host: ghost.dscm.makercenter.addr,
					port: ghost.dscm.makercenter.port,
					iurl: "/pcLoginRegister?actn=weiboAuthorizationLogin",
					uuid: "pcLoginRegister",
					meth: "post",
					type: "sdcm",
					next: [],
					func: function (req, res, fld, fle) {
						return new CurrentAPI("pcLoginRegister").
							callFunc(req, res, fld, fle);
					}
				}
			]
		};
	},

	doCallFunc: function (uuid, req, res, fld, fle) {
		var openid = gapi.getParameter(req, "openid"),
			ip = gapi.getIPv4(req.user.addr);
		ghost.getLogger().info("[doCallFunc]IP：%s, service: oauth.data.weiboAuthorizationLogin, dc: pcLoginRegister.weiboAuthorizationLogin, message: 'param', param: openid=%s", ip, openid);
		return {
			"claz": "['java.lang.String']",
			"json": [openid]
		};
		// req.uuid["moc"]=true;
		// return null;
	},

	doOutput: function (req, res, fld, fle) {
		var ip = gapi.getIPv4(req.user.addr);

		const result = req.rslt['pcLoginRegister'];

		if (!result) {
			ghost.getLogger().error("[doOutput]IP：%s, service: oauth.data.weiboAuthorizationLogin, dc: pcLoginRegister.weiboAuthorizationLogin, message: 'rslt is null', rslt: %s", ip, JSON.stringify(result));
			return gapi.toResult(500, "系统异常");
		}

		if (gapi.emptyNoequal(result.code, 0)) {
			//这里根据后端服务返回的code值不同提示信息不同
			if (gapi.emptyEqual(result.message, "")) {
				result.message = "数据加载失败";
			}
			ghost.getLogger().error("[doOutput]IP：%s, service: oauth.data.weiboAuthorizationLogin, dc: pcLoginRegister.weiboAuthorizationLogin, message: 'rslt error', rslt: %s", ip, JSON.stringify(result));
			return result;
		}

		ghost.getLogger().info("[doOutput]IP：%s, service: oauth.data.weiboAuthorizationLogin, dc: pcLoginRegister.weiboAuthorizationLogin, message: 'success', rslt: %s", ip, JSON.stringify(result));

		if (req.query["state"] == "bind")
			return gapi.toResult(505, "该微博账号已绑定其它爱贷账号");

		req.session.user = result.data.user;
		req.session.user.userName = req.session.user.username;
		return gapi.toResult(0, "Success");
	}
});
