"use strict";

const ghost = require(process.argv[2] + '/webrexco/cfg/ghost.js');
const gapi = require(process.argv[2] + '/webrexco/cmn/gapi.js');

const path = require("path");
const name = path.relative(process.argv[2], __dirname) + path.sep + path.basename(__filename, path.extname(__filename));

function trimIpAddress(ip) {
    if (ip.startsWith("::ffff:"))
        return ip.substr(7);
    return ip;
}

exports.itfconf = function () {
    return new CurrentAPI().conf();
}

exports.itfleft = function (req, res, fld, fle) {
    return new CurrentAPI().output(req, res, fld, fle);
}

var CurrentAPI = gapi.AuthorizeAPI.extend({
    conf: function () {
        return {
            auth: true,
            type: "json",
            itfs: [
                {
                    host: ghost.dscm.makercenter.addr,
                    port: ghost.dscm.makercenter.port,
                    iurl: "/accountRechargeApp?actn=getGradeInfoByType",
                    uuid: "accountRechargeApp",
                    meth: "post",
                    type: "sdcm",
                    next: [],
                    func: function (req, res, fld, fle) {
                        return new CurrentAPI("accountRechargeApp").
                            callFunc(req, res, fld, fle);
                    }
                }
            ]
        };
    },

    doCallFunc: function (uuid, req, res, fields, files) {
        const ip = trimIpAddress(req.user.addr);

        const userId = req.session.user.userId;
        req.body["userId"] = userId;

        req.logger = ghost.getLogger();
        req.logger.info(`${req.id || ip} request-parameter: (${name}) ${JSON.stringify(req.body)}`);

        // `POST` `application/x-www-form-urlencoded` form parameter check
        const parameters = "Long userId, int type";
        const claz = [], json = [];
        parameters.split(", ").forEach(function (s) {
            const pair = s.split(" ");
            switch (pair[0]) {
                case "BigDecimal":
                    claz.push("java.math.BigDecimal");
                    break;
                case "Boolean":
                    claz.push("java.lang.Boolean");
                    break;
                case "int":
                    claz.push("int");
                    break;
                case "Integer":
                    claz.push("java.lang.Integer");
                    break;
                case "long":
                    claz.push("long");
                    break;
                case "Long":
                    claz.push("java.lang.Long");
                    break;
                case "String":
                    claz.push("java.lang.String");
                    break;
            }
            json.push(req.body[pair[1]]);
        });

        return {
            claz: JSON.stringify(claz),
            json: json
        };
    },

    doOutput: function (req, res, fld, fle) {
        const ip = trimIpAddress(req.user.addr);

        const result = req.rslt["accountRechargeApp"];
        if (!result) {
            req.logger.error(`${req.id || ip} dscm-output-empty: (${name})`);
            return { code: 500, message: "系统异常" };
        }

        if (result.code != 0) {
            result.message = result.message || "数据加载失败";
            result.username = req.session.user.userName;
            req.logger.error(`${req.id || ip} dscm-output-error: (${name}) ${JSON.stringify(result)}`);
            return result;
        }

        result.username = req.session.user.userName;
        req.logger.info(`${req.id || ip} dscm-output: (${name}) ${JSON.stringify(result)}`);
        return result;
    }
});
